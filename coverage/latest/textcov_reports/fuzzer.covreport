LLVMFuzzerTestOneInput:
    9|     23|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   10|     23|  string s(reinterpret_cast<char const *>(data), size);
   11|     23|  auto v0 = from_json(s);
   12|     23|  if (v0 != nullptr) {
  ------------------
  |  Branch (12:7): [True: 1, False: 22]
  ------------------
   13|      1|    if (std::holds_alternative<double>(*v0) &&
  ------------------
  |  Branch (13:9): [True: 1, False: 0]
  ------------------
   14|      1|        std::get<double>(*v0) == std::get<double>(*v0) - 1.0) {
  ------------------
  |  Branch (14:9): [True: 1, False: 0]
  ------------------
   15|      1|      return 0;
   16|      1|    }
   17|      0|    auto v1 = to_json(std::move(v0));
   18|      0|    auto v2 = from_json(v1);
   19|      0|    if (((v0 == nullptr) ^ (v2 == nullptr)) || *v0 != *v2) {
  ------------------
  |  Branch (19:9): [True: 0, False: 0]
  |  Branch (19:48): [True: 0, False: 0]
  ------------------
   20|      0|      __builtin_trap();
   21|      0|    }
   22|      0|  }
   23|       |
   24|     22|  return 0;
   25|     23|}

_Z9from_jsonRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE:
  262|     23|shared_ptr<JsonValue> from_json(const string& str) {
  263|     23|  pcre2_match_context *match_context = pcre2_match_context_create(nullptr);
  264|     23|  pcre2_set_callout(match_context, callout_handler, nullptr);
  265|     23|  stringstream ss;
  266|     23|  ss << "(*NO_AUTO_POSSESS)(*NO_DOTSTAR_ANCHOR)(*NO_START_OPT)"
  267|     23|        "\\A (?&json_val) \\z"
  268|     23|        "(?(DEFINE)"
  269|     23|        "(?<json_val>"
  270|     23|        "\\s*"
  271|     23|        "("
  272|     23|        "    (?&string)"
  273|     23|        "  |"
  274|     23|        "    (?&push_number)"
  275|     23|        "  |"
  276|     23|        "    (?&object)"
  277|     23|        "  |"
  278|     23|        "    (?&array)"
  279|     23|        "  |"
  280|     23|        "  true (?C" << push_true << ")"
  281|     23|        "|"
  282|     23|        "  false (?C" << push_false << ")"
  283|     23|        "|"
  284|     23|        "  null (?C" << push_null << ")"
  285|     23|        ")"
  286|     23|        "\\s*"
  287|     23|        ")"
  288|     23|        "(?<string> "
  289|     23|        "  ("
  290|     23|        "    \""
  291|     23|        "    (?:"
  292|     23|        "      [^\\\\\"]+"
  293|     23|        "    |"
  294|     23|        "      \\ [\"\\\\/bfnrt]"
  295|     23|        "    )*"
  296|     23|        "    \""
  297|     23|        "  )"
  298|     23|        "(?C" << push_string << ")"
  299|     23|        ")"
  300|     23|        "(?<object> \\{ (?C" << create_map << ") ( (?&key) : (?&value) (?C" << push_back_map << ")"
  301|     23|        "( , \\s* (?&key) : (?&value) (?C" << push_back_map << "))* )? \\} )"
  302|     23|        "(?<key> (?&string) )"
  303|     23|        "(?<value> (?&json_val) )"
  304|     23|        "(?<push_number>"
  305|     23|        "  ("
  306|     23|        "    -?"
  307|     23|        "    (?: 0 | [1-9]\\d* )"
  308|     23|        "    (?: \\. \\d+ )?"
  309|     23|        "    (?: [eE] [-+]? \\d+ )?"
  310|     23|        "  )"
  311|     23|        "  (?C" << push_number << ")"
  312|     23|        ")"
  313|     23|        "(?<array> \\[ (?C" << create_array << ") (?: (?&json_val) (?C" << push_back_array << ")"
  314|     23|        "(?: , (?&json_val) (?C" << push_back_array << "))* )? \\] )"
  315|       |
  316|     23|        ")";
  317|       |  // most of the following code is copied from libpcre2's pcre2demo.c
  318|     23|  auto ss_str = ss.str();
  319|     23|  auto pattern = reinterpret_cast<PCRE2_SPTR>(ss_str.c_str());
  320|     23|  auto subject = reinterpret_cast<PCRE2_SPTR>(str.c_str());
  321|     23|  auto subject_length = static_cast<PCRE2_SIZE>(strlen(reinterpret_cast<const char *>(subject)));
  322|       |
  323|     23|  int errornumber;
  324|     23|  PCRE2_SIZE erroroffset;
  325|     23|  pcre2_code *re = pcre2_compile(
  326|     23|      pattern,                      /* the pattern */
  327|     23|      PCRE2_ZERO_TERMINATED,        /* indicates pattern is zero-terminated */
  328|     23|      PCRE2_EXTENDED, &errornumber, /* for error push_number */
  329|     23|      &erroroffset,                 /* for error offset */
  330|     23|      nullptr);                     /* use default compile context */
  331|       |
  332|     23|  if (re == nullptr) {
  ------------------
  |  Branch (332:7): [True: 0, False: 23]
  ------------------
  333|      0|    constexpr int BUF_SZ = 256;
  334|      0|    array<PCRE2_UCHAR, BUF_SZ> buffer {};
  335|      0|    pcre2_get_error_message(errornumber, buffer.data(), buffer.size());
  336|       |    /* cout << "PCRE2 compilation failed at offset " << erroroffset << ": " */
  337|       |    /*      << buffer.data() << endl; */
  338|      0|    return nullptr;
  339|      0|  }
  340|       |
  341|     23|  pcre2_match_data *match_data =
  342|     23|      pcre2_match_data_create_from_pattern(re, nullptr);
  343|       |
  344|     23|  int rc = pcre2_match(re,             /* the compiled pattern */
  345|     23|                       subject,        /* the subject string */
  346|     23|                       subject_length, /* the length of the subject */
  347|     23|                       0,              /* start at offset 0 in the subject */
  348|     23|                       0,              /* default options */
  349|     23|                       match_data,     /* block for storing the result */
  350|     23|                       match_context); /* use default match context */
  351|       |  /* nullptr);       /1* use default match context *1/ */
  352|       |
  353|       |  /* Matching failed: handle error cases */
  354|       |
  355|     23|  if (rc < 0) {
  ------------------
  |  Branch (355:7): [True: 22, False: 1]
  ------------------
  356|     22|    if (rc == PCRE2_ERROR_NOMATCH) {
  ------------------
  |  Branch (356:9): [True: 22, False: 0]
  ------------------
  357|       |        /* cout << "No match" << endl; */
  358|     22|    } else {
  359|       |      /* cout << "Matching error: " << rc << endl; */
  360|      0|    }
  361|     22|    pcre2_match_data_free(match_data); /* Release memory used for the match */
  362|     22|    pcre2_code_free(re);               /*   data and the compiled pattern. */
  363|     22|    pcre2_match_context_free(match_context);
  364|     22|    return nullptr;
  365|     22|  }
  366|       |
  367|       |  /* Match succeded. Get a pointer to the output vector, where string offsets
  368|       |  are stored. */
  369|       |
  370|      1|  PCRE2_SIZE *ovector = pcre2_get_ovector_pointer(match_data);
  371|       |
  372|       |  /*************************************************************************
  373|       |   * We have found the first match within the subject string. If the output *
  374|       |   * vector wasn't big enough, say so. Then output any substrings that were *
  375|       |   * captured.                                                              *
  376|       |   *************************************************************************/
  377|       |
  378|       |  /* The output vector wasn't big enough. This should not happen, because we
  379|       |  used pcre2_match_data_create_from_pattern() above. */
  380|       |
  381|      1|  if (rc == 0) {
  ------------------
  |  Branch (381:7): [True: 0, False: 1]
  ------------------
  382|       |      /* cout << "ovector was not big enough for all the captured substrings" << endl; */
  383|      0|  }
  384|       |
  385|       |  /* We must guard against patterns such as /(?=.\K)/ that use \K in an
  386|       |  assertion to set the start of a match later than its end. In this
  387|       |  demonstration program, we just detect this case and give up. */
  388|       |
  389|      1|  if (ovector[0] > ovector[1]) {
  ------------------
  |  Branch (389:7): [True: 0, False: 1]
  ------------------
  390|       |    /* cout << */
  391|       |    /*     "\\K was used in an assertion to set the match start after its end.\n"; */
  392|       |    /*     /1* "From end to start the match was: %.*s\n", *1/ */
  393|       |    /*     /1* (int)(ovector[0] - ovector[1]), (char *)(subject + ovector[1]); *1/ */
  394|       |    /* cout << "Run abandoned" << endl; */
  395|      0|    pcre2_match_data_free(match_data);
  396|      0|    pcre2_code_free(re);
  397|      0|    pcre2_match_context_free(match_context);
  398|      0|    return nullptr;
  399|      0|  }
  400|      1|  pcre2_match_data_free(match_data);
  401|      1|  pcre2_code_free(re);
  402|      1|  pcre2_match_context_free(match_context);
  403|      1|  return move(st.back());
  404|      1|}
pcre2_ast.cpp:_ZL15callout_handlerP21pcre2_callout_block_8Pv:
  199|    906|static int callout_handler(pcre2_callout_block *c, [[maybe_unused]] void *data) {
  200|    906|  if (is_debug) {
  ------------------
  |  Branch (200:7): [Folded - Ignored]
  ------------------
  201|      0|    cout << command_to_string(static_cast<command>(c->callout_number)) << endl;
  202|      0|  }
  203|    906|  switch (c->callout_number) {
  204|     23|  case create_array: {
  ------------------
  |  Branch (204:3): [True: 23, False: 883]
  ------------------
  205|     23|    JsonValue val = vector<shared_ptr<s>> {};
  206|     23|    st.push_back(make_shared<JsonValue>(move(val)));
  207|     23|  } break;
  208|    341|  case push_back_array: {
  ------------------
  |  Branch (208:3): [True: 341, False: 565]
  ------------------
  209|    341|    shared_ptr<JsonValue> x = move(st.back());
  210|    341|    st.pop_back();
  211|    341|    shared_ptr<JsonValue> vec_variant = move(st.back());
  212|    341|    st.pop_back();
  213|    341|    vector<shared_ptr<s>> vec = move(get<vector<shared_ptr<s>>>(*vec_variant));
  214|    341|    vec.push_back(shared_ptr<s>(new s { .v = move(*x) }));
  215|    341|    st.push_back(make_shared<JsonValue>(move(vec)));
  216|    341|  } break;
  217|    542|  case push_number: {
  ------------------
  |  Branch (217:3): [True: 542, False: 364]
  ------------------
  218|    542|    auto begin_offset = c->offset_vector[c->capture_last * 2];
  219|    542|    auto end_offset   = c->offset_vector[c->capture_last * 2 + 1];
  220|    542|    string subject { (char*)c->subject };
  221|    542|    auto val_str = subject.substr(begin_offset, end_offset - begin_offset);
  222|    542|    st.push_back(make_shared<JsonValue>(stod(val_str)));
  223|    542|  } break;
  224|      0|  case push_string: {
  ------------------
  |  Branch (224:3): [True: 0, False: 906]
  ------------------
  225|      0|    auto begin_offset = c->offset_vector[c->capture_last * 2];
  226|      0|    auto end_offset   = c->offset_vector[c->capture_last * 2 + 1];
  227|      0|    string subject { (char*)c->subject };
  228|      0|    JsonValue val_str = parse_json_string(subject.substr(begin_offset, end_offset - begin_offset));
  229|      0|    st.push_back(make_shared<JsonValue>(move(val_str)));
  230|      0|  } break;
  231|      0|  case create_map: {
  ------------------
  |  Branch (231:3): [True: 0, False: 906]
  ------------------
  232|      0|    st.push_back(make_shared<JsonValue>(map<string, shared_ptr<s>> {}));
  233|      0|  } break;
  234|      0|  case push_back_map: {
  ------------------
  |  Branch (234:3): [True: 0, False: 906]
  ------------------
  235|      0|    shared_ptr<JsonValue> v = move(st.back());
  236|      0|    st.pop_back();
  237|      0|    string k = get<string>(*move(st.back()));
  238|      0|    st.pop_back();
  239|      0|    map<string, shared_ptr<s>> m = move(get<map<string, shared_ptr<s>>>(*st.back()));
  240|      0|    st.pop_back();
  241|      0|    m[k] = shared_ptr<s> { new s { .v = move(*v) } };
  242|      0|    st.push_back(make_shared<JsonValue>(move(m)));
  243|      0|  } break;
  244|      0|  case push_true: {
  ------------------
  |  Branch (244:3): [True: 0, False: 906]
  ------------------
  245|      0|      st.push_back(move(make_shared<JsonValue>(true)));
  246|      0|  } break;
  247|      0|  case push_false: {
  ------------------
  |  Branch (247:3): [True: 0, False: 906]
  ------------------
  248|      0|    st.push_back(move(make_shared<JsonValue>(false)));
  249|      0|  } break;
  250|      0|  case push_null: {
  ------------------
  |  Branch (250:3): [True: 0, False: 906]
  ------------------
  251|      0|    st.push_back(move(make_shared<JsonValue>(monostate {})));
  252|      0|  } break;
  253|      0|  default: {
  ------------------
  |  Branch (253:3): [True: 0, False: 906]
  ------------------
  254|      0|    cout << "Exception is exceptional" << endl;
  255|      0|    throw exception{};
  256|      0|  }
  257|    906|  }
  258|    906|  return 0;
  259|    906|}

