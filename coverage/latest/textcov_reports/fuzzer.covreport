LLVMFuzzerTestOneInput:
    8|      7|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
    9|      7|  string s( reinterpret_cast<char const*>(data), size ) ;
   10|      7|    auto v = from_json(s);
   11|      7|    if (v != nullptr) {
  ------------------
  |  Branch (11:9): [True: 0, False: 7]
  ------------------
   12|      0|        if (to_json(std::move(v)) != s)
  ------------------
  |  Branch (12:13): [True: 0, False: 0]
  ------------------
   13|      0|            __builtin_trap();
   14|      0|    }
   15|       |
   16|      7|    return 0;
   17|      7|}

_Z9from_jsonRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE:
  260|      7|shared_ptr<JsonValue> from_json(const string& str) {
  261|      7|  pcre2_match_context *match_context = pcre2_match_context_create(nullptr);
  262|      7|  pcre2_set_callout(match_context, callout_handler, nullptr);
  263|      7|  stringstream ss;
  264|      7|  ss << "(*NO_AUTO_POSSESS)(*NO_DOTSTAR_ANCHOR)(*NO_START_OPT)"
  265|      7|        "\\A (?&json_val) \\z"
  266|      7|        "(?(DEFINE)"
  267|      7|        "(?<json_val>"
  268|      7|        "\\s*"
  269|      7|        "("
  270|      7|        "    (?&string)"
  271|      7|        "  |"
  272|      7|        "    (?&push_number)"
  273|      7|        "  |"
  274|      7|        "    (?&object)"
  275|      7|        "  |"
  276|      7|        "    (?&array)"
  277|      7|        "  |"
  278|      7|        "  true (?C" << push_true << ")"
  279|      7|        "|"
  280|      7|        "  false (?C" << push_false << ")"
  281|      7|        "|"
  282|      7|        "  null (?C" << push_null << ")"
  283|      7|        ")"
  284|      7|        "\\s*"
  285|      7|        ")"
  286|      7|        "(?<string> "
  287|      7|        "  ("
  288|      7|        "    \""
  289|      7|        "    (?:"
  290|      7|        "      [^\\\\\"]+"
  291|      7|        "    |"
  292|      7|        "      \\ [\"\\\\/bfnrt]"
  293|      7|        "    )*"
  294|      7|        "    \""
  295|      7|        "  )"
  296|      7|        "(?C" << push_string << ")"
  297|      7|        ")"
  298|      7|        "(?<object> \\{ (?C" << create_map << ") ( (?&key) : (?&value) (?C" << push_back_map << ")"
  299|      7|        "( , \\s* (?&key) : (?&value) (?C" << push_back_map << "))* )? \\} )"
  300|      7|        "(?<key> (?&string) )"
  301|      7|        "(?<value> (?&json_val) )"
  302|      7|        "(?<push_number>"
  303|      7|        "  ("
  304|      7|        "    -?"
  305|      7|        "    (?: 0 | [1-9]\\d* )"
  306|      7|        "    (?: \\. \\d+ )?"
  307|      7|        "    (?: [eE] [-+]? \\d+ )?"
  308|      7|        "  )"
  309|      7|        "  (?C" << push_number << ")"
  310|      7|        ")"
  311|      7|        "(?<array> \\[ (?C" << create_array << ") (?: (?&json_val) (?C" << push_back_array << ")"
  312|      7|        "(?: , (?&json_val) (?C" << push_back_array << "))* )? \\] )"
  313|       |
  314|      7|        ")";
  315|       |  // most of the following code is copied from libpcre2's pcre2demo.c
  316|      7|  auto ss_str = ss.str();
  317|      7|  auto pattern = reinterpret_cast<PCRE2_SPTR>(ss_str.c_str());
  318|      7|  auto subject = reinterpret_cast<PCRE2_SPTR>(str.c_str());
  319|      7|  auto subject_length = static_cast<PCRE2_SIZE>(strlen(reinterpret_cast<const char *>(subject)));
  320|       |
  321|      7|  int errornumber;
  322|      7|  PCRE2_SIZE erroroffset;
  323|      7|  pcre2_code *re = pcre2_compile(
  324|      7|      pattern,                      /* the pattern */
  325|      7|      PCRE2_ZERO_TERMINATED,        /* indicates pattern is zero-terminated */
  326|      7|      PCRE2_EXTENDED, &errornumber, /* for error push_number */
  327|      7|      &erroroffset,                 /* for error offset */
  328|      7|      nullptr);                     /* use default compile context */
  329|       |
  330|      7|  if (re == nullptr) {
  ------------------
  |  Branch (330:7): [True: 0, False: 7]
  ------------------
  331|      0|    constexpr int BUF_SZ = 256;
  332|      0|    array<PCRE2_UCHAR, BUF_SZ> buffer {};
  333|      0|    pcre2_get_error_message(errornumber, buffer.data(), buffer.size());
  334|       |    /* cout << "PCRE2 compilation failed at offset " << erroroffset << ": " */
  335|       |    /*      << buffer.data() << endl; */
  336|      0|    return nullptr;
  337|      0|  }
  338|       |
  339|      7|  pcre2_match_data *match_data =
  340|      7|      pcre2_match_data_create_from_pattern(re, nullptr);
  341|       |
  342|      7|  int rc = pcre2_match(re,             /* the compiled pattern */
  343|      7|                       subject,        /* the subject string */
  344|      7|                       subject_length, /* the length of the subject */
  345|      7|                       0,              /* start at offset 0 in the subject */
  346|      7|                       0,              /* default options */
  347|      7|                       match_data,     /* block for storing the result */
  348|      7|                       match_context); /* use default match context */
  349|       |  /* nullptr);       /1* use default match context *1/ */
  350|       |
  351|       |  /* Matching failed: handle error cases */
  352|       |
  353|      7|  if (rc < 0) {
  ------------------
  |  Branch (353:7): [True: 7, False: 0]
  ------------------
  354|      7|    if (rc == PCRE2_ERROR_NOMATCH) {
  ------------------
  |  Branch (354:9): [True: 7, False: 0]
  ------------------
  355|       |        /* cout << "No match" << endl; */
  356|      7|    } else {
  357|       |      /* cout << "Matching error: " << rc << endl; */
  358|      0|    }
  359|      7|    pcre2_match_data_free(match_data); /* Release memory used for the match */
  360|      7|    pcre2_code_free(re);               /*   data and the compiled pattern. */
  361|      7|    pcre2_match_context_free(match_context);
  362|      7|    return nullptr;
  363|      7|  }
  364|       |
  365|       |  /* Match succeded. Get a pointer to the output vector, where string offsets
  366|       |  are stored. */
  367|       |
  368|      0|  PCRE2_SIZE *ovector = pcre2_get_ovector_pointer(match_data);
  369|       |
  370|       |  /*************************************************************************
  371|       |   * We have found the first match within the subject string. If the output *
  372|       |   * vector wasn't big enough, say so. Then output any substrings that were *
  373|       |   * captured.                                                              *
  374|       |   *************************************************************************/
  375|       |
  376|       |  /* The output vector wasn't big enough. This should not happen, because we
  377|       |  used pcre2_match_data_create_from_pattern() above. */
  378|       |
  379|      0|  if (rc == 0) {
  ------------------
  |  Branch (379:7): [True: 0, False: 0]
  ------------------
  380|       |      /* cout << "ovector was not big enough for all the captured substrings" << endl; */
  381|      0|  }
  382|       |
  383|       |  /* We must guard against patterns such as /(?=.\K)/ that use \K in an
  384|       |  assertion to set the start of a match later than its end. In this
  385|       |  demonstration program, we just detect this case and give up. */
  386|       |
  387|      0|  if (ovector[0] > ovector[1]) {
  ------------------
  |  Branch (387:7): [True: 0, False: 0]
  ------------------
  388|       |    /* cout << */
  389|       |    /*     "\\K was used in an assertion to set the match start after its end.\n"; */
  390|       |    /*     /1* "From end to start the match was: %.*s\n", *1/ */
  391|       |    /*     /1* (int)(ovector[0] - ovector[1]), (char *)(subject + ovector[1]); *1/ */
  392|       |    /* cout << "Run abandoned" << endl; */
  393|      0|    pcre2_match_data_free(match_data);
  394|      0|    pcre2_code_free(re);
  395|      0|    pcre2_match_context_free(match_context);
  396|      0|    return nullptr;
  397|      0|  }
  398|      0|  pcre2_match_data_free(match_data);
  399|      0|  pcre2_code_free(re);
  400|      0|  pcre2_match_context_free(match_context);
  401|      0|  return move(st.back());
  402|      0|}
pcre2_ast.cpp:_ZL15callout_handlerP21pcre2_callout_block_8Pv:
  197|      7|static int callout_handler(pcre2_callout_block *c, void *data) {
  198|      7|  if (is_debug) {
  ------------------
  |  Branch (198:7): [Folded - Ignored]
  ------------------
  199|      0|    cout << command_to_string(static_cast<command>(c->callout_number)) << endl;
  200|      0|  }
  201|      7|  switch (c->callout_number) {
  202|      1|  case create_array: {
  ------------------
  |  Branch (202:3): [True: 1, False: 6]
  ------------------
  203|      1|    JsonValue val = vector<shared_ptr<s>> {};
  204|      1|    st.push_back(make_shared<JsonValue>(move(val)));
  205|      1|  } break;
  206|      0|  case push_back_array: {
  ------------------
  |  Branch (206:3): [True: 0, False: 7]
  ------------------
  207|      0|    shared_ptr<JsonValue> x = move(st.back());
  208|      0|    st.pop_back();
  209|      0|    shared_ptr<JsonValue> vec_variant = move(st.back());
  210|      0|    st.pop_back();
  211|      0|    vector<shared_ptr<s>> vec = move(get<vector<shared_ptr<s>>>(*vec_variant));
  212|      0|    vec.push_back(shared_ptr<s>(new s { .v = move(*x) }));
  213|      0|    st.push_back(make_shared<JsonValue>(move(vec)));
  214|      0|  } break;
  215|      6|  case push_number: {
  ------------------
  |  Branch (215:3): [True: 6, False: 1]
  ------------------
  216|      6|    auto begin_offset = c->offset_vector[c->capture_last * 2];
  217|      6|    auto end_offset   = c->offset_vector[c->capture_last * 2 + 1];
  218|      6|    string subject { (char*)c->subject };
  219|      6|    auto val_str = subject.substr(begin_offset, end_offset - begin_offset);
  220|      6|    st.push_back(make_shared<JsonValue>(stod(val_str)));
  221|      6|  } break;
  222|      0|  case push_string: {
  ------------------
  |  Branch (222:3): [True: 0, False: 7]
  ------------------
  223|      0|    auto begin_offset = c->offset_vector[c->capture_last * 2];
  224|      0|    auto end_offset   = c->offset_vector[c->capture_last * 2 + 1];
  225|      0|    string subject { (char*)c->subject };
  226|      0|    JsonValue val_str = parse_json_string(subject.substr(begin_offset, end_offset - begin_offset));
  227|      0|    st.push_back(make_shared<JsonValue>(move(val_str)));
  228|      0|  } break;
  229|      0|  case create_map: {
  ------------------
  |  Branch (229:3): [True: 0, False: 7]
  ------------------
  230|      0|    st.push_back(make_shared<JsonValue>(map<string, shared_ptr<s>> {}));
  231|      0|  } break;
  232|      0|  case push_back_map: {
  ------------------
  |  Branch (232:3): [True: 0, False: 7]
  ------------------
  233|      0|    shared_ptr<JsonValue> v = move(st.back());
  234|      0|    st.pop_back();
  235|      0|    string k = get<string>(*move(st.back()));
  236|      0|    st.pop_back();
  237|      0|    map<string, shared_ptr<s>> m = move(get<map<string, shared_ptr<s>>>(*st.back()));
  238|      0|    st.pop_back();
  239|      0|    m[k] = shared_ptr<s> { new s { .v = move(*v) } };
  240|      0|    st.push_back(make_shared<JsonValue>(move(m)));
  241|      0|  } break;
  242|      0|  case push_true: {
  ------------------
  |  Branch (242:3): [True: 0, False: 7]
  ------------------
  243|      0|      st.push_back(move(make_shared<JsonValue>(true)));
  244|      0|  } break;
  245|      0|  case push_false: {
  ------------------
  |  Branch (245:3): [True: 0, False: 7]
  ------------------
  246|      0|    st.push_back(move(make_shared<JsonValue>(false)));
  247|      0|  } break;
  248|      0|  case push_null: {
  ------------------
  |  Branch (248:3): [True: 0, False: 7]
  ------------------
  249|      0|    st.push_back(move(make_shared<JsonValue>(monostate {})));
  250|      0|  } break;
  251|      0|  default: {
  ------------------
  |  Branch (251:3): [True: 0, False: 7]
  ------------------
  252|      0|    cout << "Exception is exceptional" << endl;
  253|      0|    throw exception{};
  254|      0|  }
  255|      7|  }
  256|      7|  return 0;
  257|      7|}

